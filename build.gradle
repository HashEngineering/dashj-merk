plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
    id 'maven-publish'
    id 'maven'
    id 'signing'
    id 'java'
}

group 'org.dashj'
version '0.19-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'org.dashj.platform:dpp:0.19-SNAPSHOT'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
}

task buildRustLibrary {
    doLast {
        exec {
            workingDir './src/main/rust'
            commandLine 'cargo', '+nightly-2021-03-25', 'build', '--release'
        }
    }
}

tasks.withType(Test) {
    systemProperty "java.library.path", "./src/main/rust/target/release"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    tasks.withType(Sign)*.enabled = false
    publications {
        maven(MavenPublication) {
            artifact sourcesJar
            from components.java
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

assemble.dependsOn(publishToMavenLocal)
assemble.dependsOn(buildRustLibrary)

test {
    useJUnitPlatform()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            pom.project {
                name 'DashJ Merk'
                packaging 'jar'
                groupId 'org.dashj'
                artifactId 'dashj-merk'
                version '0.19-SNAPSHOT'
                description 'Dash Merk Library'
                url 'https://github.com/hashengineering/dashj-merk'

                scm {
                    connection 'scm:svn:https://github.com/hashengineering/dashj-merk'
                    developerConnection 'scm:svn:https://github.com/hashengineering/dashj-merk'
                    url 'https://github.com/hashengineering/dashj-merk'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'hashengineering'
                        name 'HashEngineering'
                        email 'hashengineeringsolutions@gmail.com'
                    }
                }
            }
        }
    }
}